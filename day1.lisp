(in-package #:aoc-2023)

;; https://adventofcode.com/2023/day/1

(declaim (inline d1-char->number))
(defun d1-char->number (ch)
  (declare (optimize (speed 3)))
  (ecase ch
    (#\1 1)
    (#\2 2)
    (#\3 3)
    (#\4 4)
    (#\5 5)
    (#\6 6)
    (#\7 7)
    (#\8 8)
    (#\9 9)))

(declaim (inline d1-string->number))
(defun d1-string->number (str)
  (declare (type (simple-array character (*)) str))
  (declare (optimize (speed 3)))
  (alexandria:eswitch (str :test #'string=)
    ("1" 1)
    ("2" 2)
    ("3" 3)
    ("4" 4)
    ("5" 5)
    ("6" 6)
    ("7" 7)
    ("8" 8)
    ("9" 9)
    ("one" 1)
    ("two" 2)
    ("three" 3)
    ("four" 4)
    ("five" 5)
    ("six" 6)
    ("seven" 7)
    ("eight" 8)
    ("nine" 9)))

(defun d1p1 ()
  (declare (optimize (speed 3)))
  (let ((sum 0))
    (declare (type (unsigned-byte 32) sum))
    (do-file (line "day1.txt" sum)
      (let (first-digit last-digit)
        (dotimes (i (length line))
          (let ((ch (char line i)))
            (when (digit-char-p ch)
              (unless first-digit
                (setf first-digit ch))
              (setf last-digit ch))))
        (setf sum (+ sum (* 10 (d1-char->number first-digit)) (d1-char->number last-digit)))))))

;; Answer: 54597

(defun d1p2 ()
  (declare (optimize (speed 3)))
  (let ((sum 0)
        (parser (cl-ppcre:create-scanner "^(\\d|one|two|three|four|five|six|seven|eight|nine)")))
    (declare (type (unsigned-byte 32) sum))
    (do-file (line "day1.txt" sum)
      (let (first-digit last-digit)
        (dotimes (i (length line))
          (let ((value (cl-ppcre:scan-to-strings parser (subseq line i))))
            (when value
              (unless first-digit (setf first-digit value))
              (setf last-digit value))))
        (unless (and first-digit last-digit) (error "Invalid line: ~a" line))
        (setf sum (+ sum (* 10 (d1-string->number first-digit)) (d1-string->number last-digit)))))))

;; Answer: 54504
